# Run this file by doing the following:
# 
# > python3 supabase/migrations/generate-wendler-data.py


# This data was generated by doing this:
#
# -- I got these rows by:
# > psql "postgresql://postgres:postgres@127.0.0.1:54322/postgres" --no-align --tuples-only -c "SELECT rpad(eb.exercise_type::text, 22, ' ') || '|' || to_char(eb.started_at, 'YYYY-MM-DD HH24:MI:SS.US') || '|' || (SELECT string_agg('W:' || lpad(COALESCE(e.actual_weight_value::text, '0'), 3, '0') || '-R:' || e.reps::text || '-W:' || CASE WHEN e.is_warmup THEN 'T' ELSE 'F' END || '-O:' || ebe.exercise_order, '|' ORDER BY ebe.exercise_order ASC) FROM exercise_block_exercises ebe JOIN exercises e ON ebe.exercise_id = e.id WHERE ebe.block_id = eb.id) FROM exercise_block eb WHERE eb.user_id = '97097295-6eb1-4824-8bfa-8984cf9bea6b' AND eb.exercise_type IN ('barbell_deadlift','barbell_back_squat','barbell_bench_press','barbell_overhead_press') AND eb.started_at > '2025-05-08';" | command cat | pbco
#
# and then manually cleaning it up. to assign a program_id and cycle_type
# manually. It is going to be annoying to do it again, but that is okay. we
# hopefully will move to just using the app and not needing to generate this
# data before this gets too annoying.
import json
data = """
{
  "2025-05-09 23:46:59.395000": { "program_id": "1", "cycle_type": "5", "exercise_type": "barbell_deadlift" },
  "2025-05-23 23:51:48.438000": { "program_id": "1", "cycle_type": "3", "exercise_type": "barbell_deadlift" },
  "2025-05-30 23:11:40.014000": { "program_id": "1", "cycle_type": "1", "exercise_type": "barbell_deadlift" },
  "2025-06-06 23:54:14.736000": { "program_id": "2", "cycle_type": "5", "exercise_type": "barbell_deadlift" },
  "2025-06-14 16:29:01.905000": { "program_id": "2", "cycle_type": "3", "exercise_type": "barbell_deadlift" },
  "2025-06-20 23:41:40.798000": { "program_id": "2", "cycle_type": "1", "exercise_type": "barbell_deadlift" },
  "2025-06-28 15:12:53.478000": { "program_id": "2", "cycle_type": "d", "exercise_type": "barbell_deadlift" },
  "2025-07-10 23:48:56.600000": { "program_id": "3", "cycle_type": "5", "exercise_type": "barbell_deadlift" },
  "2025-07-17 23:42:31.725000": { "program_id": "3", "cycle_type": "3", "exercise_type": "barbell_deadlift" },
  "2025-07-26 00:05:07.342000": { "program_id": "3", "cycle_type": "1", "exercise_type": "barbell_deadlift" },
  "2025-05-11 17:07:14.227000": { "program_id": "1", "cycle_type": "5", "exercise_type": "barbell_back_squat" },
  "2025-05-20 23:54:43.830000": { "program_id": "1", "cycle_type": "3", "exercise_type": "barbell_back_squat" },
  "2025-05-25 17:42:14.067000": { "program_id": "1", "cycle_type": "1", "exercise_type": "barbell_back_squat" },
  "2025-06-01 17:34:07.339000": { "program_id": "2", "cycle_type": "5", "exercise_type": "barbell_back_squat" },
  "2025-06-08 16:23:55.229000": { "program_id": "2", "cycle_type": "3", "exercise_type": "barbell_back_squat" },
  "2025-06-15 17:27:50.719000": { "program_id": "2", "cycle_type": "1", "exercise_type": "barbell_back_squat" },
  "2025-06-22 16:34:10.207000": { "program_id": "2", "cycle_type": "d", "exercise_type": "barbell_back_squat" },
  "2025-06-29 18:04:48.269000": { "program_id": "3", "cycle_type": "5", "exercise_type": "barbell_back_squat" },
  "2025-07-13 23:25:34.762000": { "program_id": "3", "cycle_type": "3", "exercise_type": "barbell_back_squat" },
  "2025-07-20 15:48:46.545000": { "program_id": "3", "cycle_type": "1", "exercise_type": "barbell_back_squat" },
  "2025-05-13 23:53:17.547000": { "program_id": "1", "cycle_type": "5", "exercise_type": "barbell_bench_press" },
  "2025-05-19 23:42:43.014000": { "program_id": "1", "cycle_type": "3", "exercise_type": "barbell_bench_press" },
  "2025-05-27 23:50:50.157000": { "program_id": "1", "cycle_type": "1", "exercise_type": "barbell_bench_press" },
  "2025-06-03 23:42:55.506000": { "program_id": "2", "cycle_type": "5", "exercise_type": "barbell_bench_press" },
  "2025-06-10 23:55:47.622000": { "program_id": "2", "cycle_type": "3", "exercise_type": "barbell_bench_press" },
  "2025-06-17 23:52:53.230000": { "program_id": "2", "cycle_type": "1", "exercise_type": "barbell_bench_press" },
  "2025-06-24 23:41:15.187000": { "program_id": "2", "cycle_type": "d", "exercise_type": "barbell_bench_press" },
  "2025-07-03 23:31:39.847000": { "program_id": "3", "cycle_type": "5", "exercise_type": "barbell_bench_press" },
  "2025-07-15 23:45:17.397000": { "program_id": "3", "cycle_type": "3", "exercise_type": "barbell_bench_press" },
  "2025-07-22 23:24:15.791000": { "program_id": "3", "cycle_type": "1", "exercise_type": "barbell_bench_press" },
  "2025-05-14 00:13:57.153000": { "program_id": "1", "cycle_type": "5", "exercise_type": "barbell_overhead_press" },
  "2025-05-19 23:59:32.481000": { "program_id": "1", "cycle_type": "3", "exercise_type": "barbell_overhead_press" },
  "2025-05-28 00:13:20.828000": { "program_id": "1", "cycle_type": "1", "exercise_type": "barbell_overhead_press" },
  "2025-06-04 00:00:58.645000": { "program_id": "2", "cycle_type": "5", "exercise_type": "barbell_overhead_press" },
  "2025-06-11 00:12:56.173000": { "program_id": "2", "cycle_type": "3", "exercise_type": "barbell_overhead_press" },
  "2025-06-18 00:09:36.731000": { "program_id": "2", "cycle_type": "1", "exercise_type": "barbell_overhead_press" },
  "2025-06-24 23:54:43.878000": { "program_id": "2", "cycle_type": "d", "exercise_type": "barbell_overhead_press" },
  "2025-07-03 23:51:40.302000": { "program_id": "3", "cycle_type": "5", "exercise_type": "barbell_overhead_press" },
  "2025-07-16 00:02:41.413000": { "program_id": "3", "cycle_type": "3", "exercise_type": "barbell_overhead_press" },
  "2025-07-22 23:44:52.706000": { "program_id": "3", "cycle_type": "1", "exercise_type": "barbell_overhead_press" }
}
"""
mapping = json.loads(data)

import uuid

SQL_PATH = "supabase/migrations/00000000040350_cleanup_wendler.sql"
USER_ID = "97097295-6eb1-4824-8bfa-8984cf9bea6b"

# Program names for program_id
program_names = {
    "1": "Wendler Cycle 1",
    "2": "Wendler Cycle 2",
    "3": "Wendler Cycle 3"
}

# Movement metadata (example values, adjust as needed)
movement_meta = {
    "barbell_deadlift": {"training_max": 0, "increase": 0, "unit": "pounds"},
    "barbell_back_squat": {"training_max": 0, "increase": 0, "unit": "pounds"},
    "barbell_bench_press": {"training_max": 0, "increase": 0, "unit": "pounds"},
    "barbell_overhead_press": {"training_max": 0, "increase": 0, "unit": "pounds"}
}

# Collect unique programs, movements, and blocks
programs = {}
movements = {}
blocks = []

for dt, entry in mapping.items():
    pid = entry["program_id"]
    etype = entry["exercise_type"]
    ctype = entry["cycle_type"]
    programs[pid] = program_names.get(pid, f"Program {pid}")
    movements[(pid, etype)] = movement_meta[etype]
    blocks.append({
        "program_id": pid,
        "exercise_type": etype,
        "cycle_type": ctype,
        "datetime": dt
    })

# Generate UUIDs for programs and movements
program_uuids = {pid: str(uuid.uuid4()) for pid in programs}
movement_uuids = {(pid, etype): str(uuid.uuid4()) for (pid, etype) in movements}



with open(SQL_PATH, "w") as f:
    f.write("-- Auto-generated Wendler cleanup SQL supabase/migrations/generate-wendler-data.py\n")
    f.write("-- DO NOT EDIT MANUALLY\n\n")
    f.write("CREATE OR REPLACE FUNCTION _system.cleanup_wendler() RETURNS void AS $$\n")
    f.write("BEGIN\n")

    # Insert programs
    for pid, name in programs.items():
        f.write(f"    INSERT INTO public.wendler_program (id, user_id, name, started_at, notes) VALUES ('{program_uuids[pid]}', '{USER_ID}', '{name}', NULL, 'created by _system.cleanup_wendler()');\n")

    # Insert movements
    for (pid, etype), meta in movements.items():
        f.write(f"    INSERT INTO public.wendler_program_movement (id, wendler_program_id, user_id, exercise_type, training_max_value, increase_amount_value, weight_unit) VALUES ('{movement_uuids[(pid, etype)]}', '{program_uuids[pid]}', '{USER_ID}', '{etype}', {meta['training_max']}, {meta['increase']}, '{meta['unit']}');\n")

    # Insert movement-block links using subquery for block_id
    for block in blocks:
        pid = block["program_id"]
        etype = block["exercise_type"]
        ctype = block["cycle_type"]
        dt = block["datetime"]
        # Fix cycle_type for enum
        if ctype == "d":
            ctype_sql = "deload"
        else:
            ctype_sql = ctype
        # Link block to movement using subquery for block_id
        f.write(f"    INSERT INTO public.wendler_program_movement_block (id, movement_id, block_id, cycle_type) VALUES ('{str(uuid.uuid4())}', '{movement_uuids[(pid, etype)]}', (SELECT id FROM public.exercise_block WHERE user_id = '{USER_ID}' AND exercise_type = '{etype}' AND started_at = '{dt}'), '{ctype_sql}');\n")

    f.write("END;\n$$ LANGUAGE plpgsql;\n")